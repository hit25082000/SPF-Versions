{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/domin/Documents/Luiz Eduardo/Dev/STF-TreeView/FrontEnd/jqxTreeAngular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./components/version.service\";\nimport * as i2 from \"jqwidgets-ng/jqxtree\";\nexport class AppComponent {\n  constructor(versionService) {\n    this.versionService = versionService;\n    this.versions = [];\n    this.changes = [];\n    this.data = [];\n    this.tree = [{\n      text: 'Chocolate Beverage',\n      id: '1',\n      parentid: '-1',\n      value: '$2.3'\n    }, {\n      id: '2',\n      parentid: '1',\n      text: 'Hot Chocolate',\n      value: '$2.3'\n    }, {\n      id: '3',\n      parentid: '1',\n      text: 'Peppermint Hot Chocolate',\n      value: '$2.3'\n    }, {\n      id: '4',\n      parentid: '1',\n      text: 'Salted Caramel Hot Chocolate',\n      value: '$2.3'\n    }, {\n      id: '5',\n      parentid: '1',\n      text: 'White Hot Chocolate',\n      value: '$2.3'\n    }, {\n      id: '6',\n      text: 'Espresso Beverage',\n      parentid: '-1',\n      value: '$2.3'\n    }, {\n      id: '7',\n      parentid: '6',\n      text: 'Caffe Americano',\n      value: '$2.3'\n    }, {\n      id: '8',\n      text: 'Caffe Latte',\n      parentid: '6',\n      value: '$2.3'\n    }, {\n      id: '9',\n      text: 'Caffe Mocha',\n      parentid: '6',\n      value: '$2.3'\n    }, {\n      id: '10',\n      text: 'Cappuccino',\n      parentid: '6',\n      value: '$2.3'\n    }, {\n      id: '11',\n      text: 'Pumpkin Spice Latte',\n      parentid: '6',\n      value: '$2.3'\n    }, {\n      id: '12',\n      text: 'Frappuccino',\n      parentid: '-1'\n    }, {\n      id: '13',\n      text: 'Caffe Vanilla Frappuccino',\n      parentid: '12',\n      value: '$2.3'\n    }, {\n      id: '15',\n      text: '450 calories',\n      parentid: '13',\n      value: '$2.3'\n    }, {\n      id: '16',\n      text: '16g fat',\n      parentid: '13',\n      value: '$2.3'\n    }, {\n      id: '17',\n      text: '13g protein',\n      parentid: '13',\n      value: '$2.3'\n    }, {\n      id: '14',\n      text: 'Caffe Vanilla Frappuccino Light',\n      parentid: '12',\n      value: '$2.3'\n    }];\n  }\n\n  ngOnInit() {\n    this.GetTreeData();\n  }\n\n  GetTreeData() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.versionService.GetVersions().subscribe(version => {\n        _this.versions = version;\n        console.log(_this.versions);\n      });\n\n      _this.versionService.GetChanges().subscribe(changes => {\n        _this.changes = changes;\n        console.log(_this.changes);\n      });\n\n      _this.i = 1;\n\n      _this.versions.forEach(version => {\n        _this.data.push({\n          id: (_this.i++).toString(),\n          parentid: '-1',\n          text: version.VERSAO,\n          value: ''\n        });\n\n        _this.j = _this.i;\n\n        _this.changes.forEach(change => {\n          if (change.ID_CONTROLE_VERSAO == version.ID) {\n            _this.data.push({\n              id: (_this.i++).toString(),\n              parentid: (_this.j - 1).toString(),\n              text: change.DESCRICAO,\n              value: ''\n            });\n          }\n        });\n      });\n\n      _this.source = {\n        datatype: 'json',\n        datafields: [{\n          name: 'id'\n        }, {\n          name: 'parentid'\n        }, {\n          name: 'text'\n        }, {\n          name: 'value'\n        }],\n        id: 'id',\n        localdata: _this.data\n      }; // create data adapter & perform Data Binding.\n\n      _this.dataAdapter = new jqx.dataAdapter(_this.source, {\n        autoBind: true\n      }); // get the tree items. The first parameter is the item's id. The second parameter is the parent item's id. The 'items' parameter represents\n      // the sub items collection name. Each jqxTree item has a 'label' property, but in the JSON data, we have a 'text' field. The last parameter\n      // specifies the mapping between the 'text' and 'label' fields.\n\n      _this.records = _this.dataAdapter.getRecordsHierarchy('id', 'parentid', 'items', [{\n        name: 'text',\n        map: 'label'\n      }]);\n    })();\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.VersionService));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 2,\n  vars: 2,\n  consts: [[3, \"width\", \"source\"], [\"myTree\", \"\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"jqxTree\", 0, 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"width\", 300)(\"source\", ctx.records);\n    }\n  },\n  dependencies: [i2.jqxTreeComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["AppComponent","constructor","versionService","text","id","parentid","value","ngOnInit","GetTreeData","GetVersions","subscribe","version","versions","console","log","GetChanges","changes","i","forEach","data","push","toString","VERSAO","j","change","ID_CONTROLE_VERSAO","ID","DESCRICAO","source","datatype","datafields","name","localdata","dataAdapter","jqx","autoBind","records","getRecordsHierarchy","map","i0","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\domin\\Documents\\Luiz Eduardo\\Dev\\STF-TreeView\\FrontEnd\\jqxTreeAngular\\src\\app\\app.component.ts","C:\\Users\\domin\\Documents\\Luiz Eduardo\\Dev\\STF-TreeView\\FrontEnd\\jqxTreeAngular\\src\\app\\app.component.html"],"sourcesContent":["import { Change } from './components/models/change.model';\r\nimport { Version } from './components/models/version.model';\r\nimport { Observable } from 'rxjs';\r\nimport { VersionService } from './components/version.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { jqxTreeComponent } from 'jqwidgets-ng/jqxtree';\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n})\r\nexport class AppComponent implements OnInit {\r\n  versions: Version[] = [];\r\n  changes: Change[] = [];\r\n  data: Array<any> = [];\r\n  dataAdapter: any;\r\n  source: any;\r\n  records: any;\r\n  i: any;\r\n  j: any;\r\n  constructor(private versionService: VersionService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.GetTreeData();\r\n  }\r\n\r\n  async GetTreeData() {\r\n    this.versionService.GetVersions().subscribe((version) => {\r\n      this.versions = version;\r\n      console.log(this.versions);\r\n    });\r\n\r\n    this.versionService.GetChanges().subscribe((changes) => {\r\n      this.changes = changes;\r\n      console.log(this.changes);\r\n    });\r\n\r\n    this.i = 1;\r\n    this.versions.forEach((version) => {\r\n      this.data.push({\r\n        id: (this.i++).toString(),\r\n        parentid: '-1',\r\n        text: version.VERSAO,\r\n        value: '',\r\n      });\r\n      this.j = this.i;\r\n      this.changes.forEach((change) => {\r\n        if (change.ID_CONTROLE_VERSAO == version.ID) {\r\n          this.data.push({\r\n            id: (this.i++).toString(),\r\n            parentid: (this.j - 1).toString(),\r\n            text: change.DESCRICAO,\r\n            value: '',\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.source = {\r\n      datatype: 'json',\r\n      datafields: [\r\n        { name: 'id' },\r\n        { name: 'parentid' },\r\n        { name: 'text' },\r\n        { name: 'value' },\r\n      ],\r\n      id: 'id',\r\n      localdata: this.data,\r\n    };\r\n    // create data adapter & perform Data Binding.\r\n    this.dataAdapter = new jqx.dataAdapter(this.source, { autoBind: true });\r\n    // get the tree items. The first parameter is the item's id. The second parameter is the parent item's id. The 'items' parameter represents\r\n    // the sub items collection name. Each jqxTree item has a 'label' property, but in the JSON data, we have a 'text' field. The last parameter\r\n    // specifies the mapping between the 'text' and 'label' fields.\r\n    this.records = this.dataAdapter.getRecordsHierarchy(\r\n      'id',\r\n      'parentid',\r\n      'items',\r\n      [{ name: 'text', map: 'label' }]\r\n    );\r\n  }\r\n\r\n  tree: any[] = [\r\n    {\r\n      text: 'Chocolate Beverage',\r\n      id: '1',\r\n      parentid: '-1',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '2',\r\n      parentid: '1',\r\n      text: 'Hot Chocolate',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '3',\r\n      parentid: '1',\r\n      text: 'Peppermint Hot Chocolate',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '4',\r\n      parentid: '1',\r\n      text: 'Salted Caramel Hot Chocolate',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '5',\r\n      parentid: '1',\r\n      text: 'White Hot Chocolate',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '6',\r\n      text: 'Espresso Beverage',\r\n      parentid: '-1',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '7',\r\n      parentid: '6',\r\n      text: 'Caffe Americano',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '8',\r\n      text: 'Caffe Latte',\r\n      parentid: '6',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '9',\r\n      text: 'Caffe Mocha',\r\n      parentid: '6',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '10',\r\n      text: 'Cappuccino',\r\n      parentid: '6',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '11',\r\n      text: 'Pumpkin Spice Latte',\r\n      parentid: '6',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '12',\r\n      text: 'Frappuccino',\r\n      parentid: '-1',\r\n    },\r\n    {\r\n      id: '13',\r\n      text: 'Caffe Vanilla Frappuccino',\r\n      parentid: '12',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '15',\r\n      text: '450 calories',\r\n      parentid: '13',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '16',\r\n      text: '16g fat',\r\n      parentid: '13',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '17',\r\n      text: '13g protein',\r\n      parentid: '13',\r\n      value: '$2.3',\r\n    },\r\n    {\r\n      id: '14',\r\n      text: 'Caffe Vanilla Frappuccino Light',\r\n      parentid: '12',\r\n      value: '$2.3',\r\n    },\r\n  ];\r\n}\r\n","<jqxTree #myTree [width]=\"300\" [source]=\"records\"></jqxTree>\n"]},"metadata":{},"sourceType":"module"}